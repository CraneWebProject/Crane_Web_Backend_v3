pipeline {
    agent any

    environment {
        SERVICE_NAME = 'user-service'
        IMAGE_TAG = "user-service:latest"
        LOCAL_PORT = "8081"
        // ‚úÖ ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
        JWT_KEY = credentials('JWT_KEY')
        REDIS_HOST = credentials('REDIS_HOST')
        REDIS_PORT = credentials('REDIS_PORT')
        MYSQL_URL = credentials('MYSQL_URL')
        MYSQL_USER = credentials('MYSQL_USER')
        MYSQL_PASSWORD = credentials('MYSQL_PASSWORD')
        EUREKA_URL = credentials('EUREKA_URL')
    }

    stages {
        stage('Check Environment Variables') {
            steps {
                script {
                    echo "‚úÖ Jenkins ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏..."
                    echo "üîç REDIS_HOST: $REDIS_HOST"
                    echo "üîç REDIS_PORT: $REDIS_PORT"
                }
            }
        }

        stage('Check Changes') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only HEAD^", returnStdout: true).trim()
                    def serviceChanged = changes.split('\n').any { it.startsWith('user-service/') }

                    if (!serviceChanged) {
                        currentBuild.result = 'NOT_BUILT'
                        error('No changes in user-service directory, skipping build')
                    }
                    echo "‚úÖ user-service Î≥ÄÍ≤Ω ÏÇ¨Ìï≠ Í∞êÏßÄÎê®. ÎπåÎìúÎ•º ÏßÑÌñâÌï©ÎãàÎã§."
                }
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'msa',
                    url: 'https://github.com/CraneWebProject/Crane_Web_Backend_v3'

                script {
                    def gitCommit = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                    echo "‚úÖ ÌòÑÏû¨ ÎπåÎìúÌïòÎäî Ïª§Î∞ã: ${gitCommit}"
                }
            }
        }

        stage('Build') {
            steps {
                dir('user-service') {
                    sh '''
                        chmod +x gradlew
                        ./gradlew clean build -x test
                    '''
                }
            }
            post {
                success {
                    echo "‚úÖ Build Îã®Í≥Ñ ÏôÑÎ£å"
                }
                failure {
                    error "‚ùå Build Îã®Í≥Ñ Ïã§Ìå®"
                }
            }
        }

        stage('Docker Build & Run') {
            steps {
                script {
                    sh '''
                    echo "üîç ÌòÑÏû¨ REDIS_HOST Í∞í: $REDIS_HOST"
                    echo "üîç ÌòÑÏû¨ REDIS_PORT Í∞í: $REDIS_PORT"

                    docker build -t $IMAGE_TAG \
                        --build-arg JWT_KEY=$JWT_KEY \
                        --build-arg REDIS_HOST=$REDIS_HOST \
                        --build-arg REDIS_PORT=$REDIS_PORT \
                        --build-arg MYSQL_URL=$MYSQL_URL \
                        --build-arg MYSQL_USER=$MYSQL_USER \
                        --build-arg MYSQL_PASSWORD=$MYSQL_PASSWORD \
                        --build-arg EUREKA_URL=$EUREKA_URL \
                        user-service/

                    # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï¢ÖÎ£å ÌõÑ ÏÇ≠Ï†ú
                    docker stop $SERVICE_NAME || true
                    docker rm $SERVICE_NAME || true

                    # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
                    docker run -d --name $SERVICE_NAME \
                        -e JWT_KEY=$JWT_KEY \
                        -e REDIS_HOST=$REDIS_HOST \
                        -e REDIS_PORT=$REDIS_PORT \
                        -e MYSQL_URL=$MYSQL_URL \
                        -e MYSQL_USER=$MYSQL_USER \
                        -e MYSQL_PASSWORD=$MYSQL_PASSWORD \
                        -e EUREKA_URL=$EUREKA_URL \
                        -p $LOCAL_PORT:8081 $IMAGE_TAG
                    '''
                }
            }
        }
    }

    post {
        success {
            echo """
            ===========================================
            ‚úÖ Pipeline Successfully Completed
            Service: ${SERVICE_NAME}
            Image: ${IMAGE_TAG}
            Port: ${LOCAL_PORT}
            ===========================================
            """
        }
        failure {
            echo """
            ===========================================
            ‚ùå Pipeline Failed
            Service: ${SERVICE_NAME}
            Stage: ${currentBuild.result}
            ===========================================
            """
        }
        always {
            cleanWs()
        }
    }
}
